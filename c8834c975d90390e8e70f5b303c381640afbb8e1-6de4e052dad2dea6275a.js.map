{"version":3,"file":"c8834c975d90390e8e70f5b303c381640afbb8e1-6de4e052dad2dea6275a.js","mappings":"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","sources":["webpack://leeorf.githuib.io/./node_modules/classnames/index.js","webpack://leeorf.githuib.io/./node_modules/react-icons/lib/esm/iconsManifest.js","webpack://leeorf.githuib.io/./node_modules/react-icons/lib/esm/iconContext.js","webpack://leeorf.githuib.io/./node_modules/react-icons/lib/esm/iconBase.js","webpack://leeorf.githuib.io/../src/image-utils.ts","webpack://leeorf.githuib.io/../src/components/hooks.ts","webpack://leeorf.githuib.io/../src/components/picture.tsx","webpack://leeorf.githuib.io/../src/components/layout-wrapper.tsx","webpack://leeorf.githuib.io/../src/components/placeholder.tsx","webpack://leeorf.githuib.io/../src/components/main-image.tsx","webpack://leeorf.githuib.io/../src/components/gatsby-image.browser.tsx","webpack://leeorf.githuib.io/../src/components/gatsby-image.server.tsx","webpack://leeorf.githuib.io/../src/components/static-image.server.tsx","webpack://leeorf.githuib.io/../src/components/static-image.tsx","webpack://leeorf.githuib.io/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js","webpack://leeorf.githuib.io/./src/components/elements/Logo.tsx","webpack://leeorf.githuib.io/./src/constants/siteMeta.ts","webpack://leeorf.githuib.io/./src/components/elements/NavMenu.tsx","webpack://leeorf.githuib.io/./src/components/shared/Header.tsx","webpack://leeorf.githuib.io/./src/components/layout/PageLayout.tsx","webpack://leeorf.githuib.io/./src/components/shared/Expander.tsx","webpack://leeorf.githuib.io/./src/hooks/useFluidCover.ts","webpack://leeorf.githuib.io/./src/hooks/useFluidCovers.ts","webpack://leeorf.githuib.io/./src/components/shared/FluidImage.tsx","webpack://leeorf.githuib.io/./src/components/shared/HyperLink.tsx","webpack://leeorf.githuib.io/./src/components/shared/InteractiveText.tsx","webpack://leeorf.githuib.io/./src/components/shared/Tag.tsx","webpack://leeorf.githuib.io/./src/components/shared/Tags.tsx","webpack://leeorf.githuib.io/./src/constants/routes.ts"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n  var nativeCodeString = '[native code]';\n  function classNames() {\n    var classes = [];\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg)) {\n        if (arg.length) {\n          var inner = classNames.apply(null, arg);\n          if (inner) {\n            classes.push(inner);\n          }\n        }\n      } else if (argType === 'object') {\n        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n          classes.push(arg.toString());\n          continue;\n        }\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n    return classes.join(' ');\n  }\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","export var IconsManifest = [{\n  \"id\": \"ci\",\n  \"name\": \"Circum Icons\",\n  \"projectUrl\": \"https://circumicons.com/\",\n  \"license\": \"MPL-2.0 license\",\n  \"licenseUrl\": \"https://github.com/Klarr-Agency/Circum-Icons/blob/main/LICENSE\"\n}, {\n  \"id\": \"fa\",\n  \"name\": \"Font Awesome\",\n  \"projectUrl\": \"https://fontawesome.com/\",\n  \"license\": \"CC BY 4.0 License\",\n  \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n}, {\n  \"id\": \"io\",\n  \"name\": \"Ionicons 4\",\n  \"projectUrl\": \"https://ionicons.com/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://github.com/ionic-team/ionicons/blob/master/LICENSE\"\n}, {\n  \"id\": \"io5\",\n  \"name\": \"Ionicons 5\",\n  \"projectUrl\": \"https://ionicons.com/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://github.com/ionic-team/ionicons/blob/master/LICENSE\"\n}, {\n  \"id\": \"md\",\n  \"name\": \"Material Design icons\",\n  \"projectUrl\": \"http://google.github.io/material-design-icons/\",\n  \"license\": \"Apache License Version 2.0\",\n  \"licenseUrl\": \"https://github.com/google/material-design-icons/blob/master/LICENSE\"\n}, {\n  \"id\": \"ti\",\n  \"name\": \"Typicons\",\n  \"projectUrl\": \"http://s-ings.com/typicons/\",\n  \"license\": \"CC BY-SA 3.0\",\n  \"licenseUrl\": \"https://creativecommons.org/licenses/by-sa/3.0/\"\n}, {\n  \"id\": \"go\",\n  \"name\": \"Github Octicons icons\",\n  \"projectUrl\": \"https://octicons.github.com/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://github.com/primer/octicons/blob/master/LICENSE\"\n}, {\n  \"id\": \"fi\",\n  \"name\": \"Feather\",\n  \"projectUrl\": \"https://feathericons.com/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://github.com/feathericons/feather/blob/master/LICENSE\"\n}, {\n  \"id\": \"gi\",\n  \"name\": \"Game Icons\",\n  \"projectUrl\": \"https://game-icons.net/\",\n  \"license\": \"CC BY 3.0\",\n  \"licenseUrl\": \"https://creativecommons.org/licenses/by/3.0/\"\n}, {\n  \"id\": \"wi\",\n  \"name\": \"Weather Icons\",\n  \"projectUrl\": \"https://erikflowers.github.io/weather-icons/\",\n  \"license\": \"SIL OFL 1.1\",\n  \"licenseUrl\": \"http://scripts.sil.org/OFL\"\n}, {\n  \"id\": \"di\",\n  \"name\": \"Devicons\",\n  \"projectUrl\": \"https://vorillaz.github.io/devicons/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"ai\",\n  \"name\": \"Ant Design Icons\",\n  \"projectUrl\": \"https://github.com/ant-design/ant-design-icons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"bs\",\n  \"name\": \"Bootstrap Icons\",\n  \"projectUrl\": \"https://github.com/twbs/icons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"ri\",\n  \"name\": \"Remix Icon\",\n  \"projectUrl\": \"https://github.com/Remix-Design/RemixIcon\",\n  \"license\": \"Apache License Version 2.0\",\n  \"licenseUrl\": \"http://www.apache.org/licenses/\"\n}, {\n  \"id\": \"fc\",\n  \"name\": \"Flat Color Icons\",\n  \"projectUrl\": \"https://github.com/icons8/flat-color-icons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"gr\",\n  \"name\": \"Grommet-Icons\",\n  \"projectUrl\": \"https://github.com/grommet/grommet-icons\",\n  \"license\": \"Apache License Version 2.0\",\n  \"licenseUrl\": \"http://www.apache.org/licenses/\"\n}, {\n  \"id\": \"hi\",\n  \"name\": \"Heroicons\",\n  \"projectUrl\": \"https://github.com/tailwindlabs/heroicons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"hi2\",\n  \"name\": \"Heroicons 2\",\n  \"projectUrl\": \"https://github.com/tailwindlabs/heroicons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"si\",\n  \"name\": \"Simple Icons\",\n  \"projectUrl\": \"https://simpleicons.org/\",\n  \"license\": \"CC0 1.0 Universal\",\n  \"licenseUrl\": \"https://creativecommons.org/publicdomain/zero/1.0/\"\n}, {\n  \"id\": \"sl\",\n  \"name\": \"Simple Line Icons\",\n  \"projectUrl\": \"https://thesabbir.github.io/simple-line-icons/\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"im\",\n  \"name\": \"IcoMoon Free\",\n  \"projectUrl\": \"https://github.com/Keyamoon/IcoMoon-Free\",\n  \"license\": \"CC BY 4.0 License\"\n}, {\n  \"id\": \"bi\",\n  \"name\": \"BoxIcons\",\n  \"projectUrl\": \"https://github.com/atisawd/boxicons\",\n  \"license\": \"CC BY 4.0 License\"\n}, {\n  \"id\": \"cg\",\n  \"name\": \"css.gg\",\n  \"projectUrl\": \"https://github.com/astrit/css.gg\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"vsc\",\n  \"name\": \"VS Code Icons\",\n  \"projectUrl\": \"https://github.com/microsoft/vscode-codicons\",\n  \"license\": \"CC BY 4.0\",\n  \"licenseUrl\": \"https://creativecommons.org/licenses/by/4.0/\"\n}, {\n  \"id\": \"tb\",\n  \"name\": \"Tabler Icons\",\n  \"projectUrl\": \"https://github.com/tabler/tabler-icons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://opensource.org/licenses/MIT\"\n}, {\n  \"id\": \"tfi\",\n  \"name\": \"Themify Icons\",\n  \"projectUrl\": \"https://github.com/lykmapipo/themify-icons\",\n  \"license\": \"MIT\",\n  \"licenseUrl\": \"https://github.com/thecreation/standard-icons/blob/master/modules/themify-icons/LICENSE\"\n}];","import React from 'react';\nexport var DefaultContext = {\n  color: undefined,\n  size: undefined,\n  className: undefined,\n  style: undefined,\n  attr: undefined\n};\nexport var IconContext = React.createContext && React.createContext(DefaultContext);","var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React from 'react';\nimport { IconContext, DefaultContext } from './iconContext';\nfunction Tree2Element(tree) {\n  return tree && tree.map(function (node, i) {\n    return React.createElement(node.tag, __assign({\n      key: i\n    }, node.attr), Tree2Element(node.child));\n  });\n}\nexport function GenIcon(data) {\n  return function (props) {\n    return React.createElement(IconBase, __assign({\n      attr: __assign({}, data.attr)\n    }, props), Tree2Element(data.child));\n  };\n}\nexport function IconBase(props) {\n  var elem = function elem(conf) {\n    var attr = props.attr,\n      size = props.size,\n      title = props.title,\n      svgProps = __rest(props, [\"attr\", \"size\", \"title\"]);\n    var computedSize = size || conf.size || \"1em\";\n    var className;\n    if (conf.className) className = conf.className;\n    if (props.className) className = (className ? className + ' ' : '') + props.className;\n    return React.createElement(\"svg\", __assign({\n      stroke: \"currentColor\",\n      fill: \"currentColor\",\n      strokeWidth: \"0\"\n    }, conf.attr, attr, svgProps, {\n      className: className,\n      style: __assign(__assign({\n        color: props.color || conf.color\n      }, conf.style), props.style),\n      height: computedSize,\n      width: computedSize,\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }), title && React.createElement(\"title\", null, title), props.children);\n  };\n  return IconContext !== undefined ? React.createElement(IconContext.Consumer, null, function (conf) {\n    return elem(conf);\n  }) : elem(DefaultContext);\n}","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import React from 'react';\nimport { routes } from '../../constants/routes';\nimport { brandName } from '../../constants/siteMeta';\n\nimport { Link } from '../../types/Link';\nimport { HyperLink } from '../shared/HyperLink';\n\nexport const Logo = (): React.ReactElement => {\n  const link: Link = routes.home;\n\n  return (\n    <HyperLink\n      link={link}\n      className=\"font-extrabold text-sm tracking-widest uppercase\"\n    >\n      {brandName}\n    </HyperLink>\n  );\n};\n","export const brandName = 'leeorf';\n","import React from 'react';\nimport { routesList } from '../../constants/routes';\nimport { HyperLink } from '../shared/HyperLink';\nimport { InteractiveText } from '../shared/InteractiveText';\n\nexport const NavMenu = (): React.ReactElement => {\n  return (\n    <ul className=\"flex space-x-5\">\n      {routesList.map(route => (\n        <li key={route.url} className=\"uppercase text-xs\">\n          <HyperLink link={route} activeClassName=\"font-bold\">\n            <InteractiveText>{route.caption}</InteractiveText>\n          </HyperLink>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { Logo } from '../elements/Logo';\nimport { NavMenu } from '../elements/NavMenu';\nimport { InteractiveText } from './InteractiveText';\n\nexport const Header = () => {\n  return (\n    <header className=\"flex items-center w-full space-x-12\">\n      <InteractiveText>\n        <Logo />\n      </InteractiveText>\n      <nav>\n        <NavMenu />\n      </nav>\n    </header>\n  );\n};\n","import React from 'react';\nimport { Header } from '../shared/Header';\n\ntype PageLayoutProps = {\n  children: React.ReactNode;\n};\n\nexport const PageLayout = (props: PageLayoutProps): React.ReactElement => {\n  const { children } = props;\n\n  return (\n    <main className=\"flex flex-col items-center\">\n      <div className=\"max-w-screen-xl self-stretch m-auto w-full px-6 py-6 sm:px-12\">\n        <Header />\n        <article className=\"py-12\">{children}</article>\n      </div>\n    </main>\n  );\n};\n","import React, { useState } from 'react';\nimport { InteractiveText } from './InteractiveText';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\ntype ExpanderProps = {\n  items: any[];\n  numToShow: number;\n  onRender: (item: any) => React.ReactElement;\n};\n\nexport const Expander = (props: ExpanderProps): React.ReactElement | null => {\n  const { items, onRender, numToShow } = props;\n\n  const [expanded, setExpanded] = useState(false);\n\n  if (!items.length) {\n    return null;\n  }\n\n  let somethingToHide = false;\n\n  const filteredItems = items\n    .filter((_, index) => {\n      const hidden: boolean = index >= numToShow;\n\n      if (hidden) {\n        somethingToHide = true;\n      }\n\n      return expanded || !hidden;\n    })\n    .map(onRender)\n    .map((child, index) => {\n      // eslint-disable-next-line react/no-array-index-key\n      return <li key={index}>{child}</li>;\n    });\n\n  const showMoreButton = somethingToHide ? (\n    <li>\n      <button\n        type=\"button\"\n        className=\"text-xs font-light\"\n        onClick={() => {\n          setExpanded(!expanded);\n        }}\n      >\n        <InteractiveText>{expanded ? '- less' : '+ more'}</InteractiveText>\n      </button>\n    </li>\n  ) : null;\n\n  return (\n    <ul className=\"flex flex-row flex-wrap justify-center sm:justify-start\">\n      {filteredItems}\n      {showMoreButton}\n    </ul>\n  );\n};\n","import { getImage } from 'gatsby-plugin-image';\nimport { useFluidCovers } from './useFluidCovers';\n\ntype UseFuildCoverProps = {\n  imagePath?: string | null;\n};\n\nexport const useFluidCover = (props: UseFuildCoverProps) => {\n  const { imagePath } = props;\n\n  const allImages = useFluidCovers();\n\n  if (!imagePath) {\n    return undefined;\n  }\n\n  const foundNode = allImages.find(node => node.relativePath === imagePath);\n\n  if (!foundNode) {\n    return undefined;\n  }\n\n  return getImage(foundNode);\n};\n","import { graphql, useStaticQuery } from 'gatsby';\n\nexport const useFluidCovers = () => {\n  const images = useStaticQuery(graphql`\n    query UseImagesQuery {\n      allFile(filter: { sourceInstanceName: { eq: \"images\" } }) {\n        nodes {\n          base\n          name\n          relativePath\n          childImageSharp {\n            gatsbyImageData(\n              transformOptions: {\n                fit: COVER\n                cropFocus: CENTER\n                grayscale: false\n              }\n            )\n          }\n        }\n      }\n    }\n  `);\n\n  return images.allFile.nodes;\n};\n","import React from 'react';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport { useFluidCover } from '../../hooks/useFluidCover';\nimport { FluidImage as FluidImageType, Image } from '../../types/Image';\n\ntype FluidImageProps = {\n  image?: Image | null | undefined;\n  fluidImage?: FluidImageType | null | undefined;\n  className?: string;\n  imgClassName?: string;\n};\n\nexport const FluidImage = (\n  props: FluidImageProps\n): React.ReactElement | null => {\n  const {\n    image,\n    fluidImage: fluidImageProvided,\n    className = '',\n    imgClassName = '',\n  } = props;\n\n  const fluidImageFetched = useFluidCover({ imagePath: image?.srcPath });\n  const fluidImage = fluidImageProvided || fluidImageFetched;\n\n  if (!fluidImage) {\n    return null;\n  }\n\n  return (\n    <GatsbyImage\n      image={fluidImage}\n      className={className}\n      style={{ height: '100%' }}\n      alt={image?.caption || ''}\n      title={image?.caption || ''}\n      imgClassName={imgClassName}\n    />\n  );\n};\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { Link as LinkType } from '../../types/Link';\n\ntype HyperLinkProps = {\n  link: LinkType;\n  children: React.ReactNode;\n  activeClassName?: string;\n  shouldOpenInNewTab?: boolean;\n  className?: string;\n};\n\nexport const HyperLink = (props: HyperLinkProps): React.ReactElement | null => {\n  const {\n    link,\n    children,\n    className,\n    shouldOpenInNewTab = true,\n    activeClassName = '',\n  } = props;\n\n  if (!link.url) {\n    return null;\n  }\n\n  const isExternal = link.url.match(/http/gi);\n  const isHash = link.url.startsWith('#');\n\n  const externalLink = (\n    <a\n      href={link.url}\n      title={link.caption}\n      className={className}\n      target={!isHash && shouldOpenInNewTab ? '_blank' : '_self'}\n      rel=\"noreferrer\"\n    >\n      {children}\n    </a>\n  );\n\n  const internalLink = (\n    <Link\n      to={link.url}\n      title={link.caption}\n      activeClassName={activeClassName}\n      className={className}\n    >\n      {children}\n    </Link>\n  );\n\n  return isExternal || isHash ? externalLink : internalLink;\n};\n","import React from 'react';\nimport combineClassNames from 'classnames';\n\ntype InteractiveTextProps = {\n  children: React.ReactNode;\n  className?: string;\n  hoverClassName?: string;\n};\n\nexport const InteractiveText = (\n  props: InteractiveTextProps\n): React.ReactElement => {\n  const { children, className, hoverClassName } = props;\n\n  const classNames = combineClassNames(className, hoverClassName, {\n    'transition duration-150 ease-in-out': true,\n    'hover:text-teal-500': !hoverClassName,\n  });\n\n  return <span className={classNames}>{children}</span>;\n};\n","import React from 'react';\nimport { Tag as TagType } from '../../types/Tag';\n\ntype TagProps = {\n  tag: TagType;\n};\n\nexport const Tag = (props: TagProps): React.ReactElement => {\n  const { tag } = props;\n\n  return (\n    <span\n      className=\" bg-gray-200 text-xs px-2 py-1 rounded-sm inline-block mr-2 mb-2\"\n      key={tag}\n    >\n      {tag}\n    </span>\n  );\n};\n","import React from 'react';\nimport combineClasses from 'classnames';\n\nimport { Tag as TagType } from '../../types/Tag';\nimport { Expander } from './Expander';\nimport { Tag } from './Tag';\n\ntype TagsProps = {\n  tags: TagType[];\n  className?: string;\n  numToShow?: number;\n};\n\nexport const Tags = (props: TagsProps): React.ReactElement => {\n  const { tags, className = '', numToShow = Infinity } = props;\n\n  const classNames = combineClasses(className, {});\n\n  const onRender = (tag: TagType): React.ReactElement => {\n    return <Tag key={tag} tag={tag} />;\n  };\n\n  return (\n    <div className={classNames}>\n      <Expander items={tags} onRender={onRender} numToShow={numToShow} />\n    </div>\n  );\n};\n","import { Link } from '../types/Link';\n\ntype Slug = 'home' | 'projects' | 'blog';\n\nexport type Route = {\n  path: string;\n  caption: string;\n};\n\ntype Routes = Record<Slug, Link>;\n\nexport const routes: Routes = {\n  home: {\n    caption: 'Sobre',\n    url: '/',\n  },\n  projects: {\n    caption: 'Projetos',\n    url: '/projects',\n  },\n  blog: {\n    caption: 'Blog',\n    url: 'https://blog.leeorf.dev',\n  },\n};\n\nexport const routesList = Object.keys(routes).map(key => {\n  const routeKey = key as Slug;\n  return { ...routes[routeKey] };\n});\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","includes","key","call","join","module","exports","default","DefaultContext","color","undefined","size","className","style","attr","IconContext","__assign","assign","t","s","n","p","this","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","Tree2Element","tree","map","node","tag","child","GenIcon","data","props","IconBase","elem","conf","title","svgProps","computedSize","stroke","fill","strokeWidth","height","width","xmlns","children","Consumer","images","_node$images","fallback","_node$images$fallback","src","Boolean","gatsbyImageData","gatsbyImage","childImageSharp","_node$childImageSharp","format","isLoading","isLoaded","loading","shouldLoad","opacity","placeholder","layout","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","alt","role","a","Fragment","Sizer","srcSet","decoding","sizes","Image","media","type","propTypes","PropTypes","Picture","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","onError","as","preactClass","class","onStartLoad","onLoad","overflow","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","memo","warn","GatsbyImageHydrator","GatsbyImage","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","camelCase","input","options","TypeError","pascalCase","x","trim","filter","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","Logo","link","routes","HyperLink","NavMenu","routesList","route","url","activeClassName","InteractiveText","caption","Header","PageLayout","Expander","items","onRender","numToShow","useState","expanded","setExpanded","somethingToHide","filteredItems","index","hidden","showMoreButton","onClick","useFluidCover","imagePath","allImages","useStaticQuery","allFile","nodes","foundNode","find","relativePath","getImage","FluidImage","fluidImageProvided","fluidImage","imgClassName","fluidImageFetched","srcPath","shouldOpenInNewTab","isExternal","match","isHash","startsWith","externalLink","href","target","rel","internalLink","Link","to","hoverClassName","combineClassNames","Tag","Tags","tags","Infinity","combineClasses","home","projects","blog","keys","routeKey"],"sourceRoot":""}